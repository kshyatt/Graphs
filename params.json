{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"# Graphs\r\n\r\nThis code is intended to generate graphs for quantum lattice model simulations, specifically the Numerical Linked Cluster expansion method. It was developed by Katie Hyatt (@kshyatt), Ann Kallin (@akallin), and Roger Melko (@rgmelko). \r\n\r\nThis code aims to generate all isomorphically and/or topologically distinct graphs on a variety of 2D lattices used in condensed matter simulations. We define two graphs as isomorphically distinct iff there is no transformation in the lattice's [dihedral group](http://en.wikipedia.org/wiki/Dihedral_group) that can take one graph to the other. We say they are topologically distinct if the Hamiltonians for the two graphs will be different.\r\n\r\nInstallation\r\n============\r\n\r\nSince Graphs is ISO C++, it should work on any machine/OS which has a C++ compiler installed. You can use the included Makefile to compile graphs.cpp. g++ and icpc have been tested. Note that Graphs requires OpenMP, so you will need gcc 4.2 or greater, or icpc 10.1 or greater. \r\n\r\nRunning graphs\r\n==============\r\n\r\nGraphs is intended to generate a variety of types of graphs needed for numerical condensed matter simulations. You can create site- and bond-based graphs. You can find detailed descriptions of these on the Graphs [wiki](http://github.com/rgmelko/Graphs/wiki). Since NLC is run on sets of self-consistent graphs, you can generate all site- or bond-based graphs, or only sets like \"all rectangles\". To read our more complete documentation of all this, head on over to the [Doxygen documentation](http://csclub.uwaterloo.ca/~kshyatt/Graphs/index.html).\r\n\r\nYou will need to create a vector to store the graphs, and then call the appropriate function. graphs also contains utility functions to read/write the graphs to/from file. Here's an example where we generate site-based graphs:\r\n```C++\r\nstd::vector< std::vector< SiteGraph > > testsites;\r\ntestsites.resize(1); // Create a graph with one site to start from\r\n\r\nstd::vector< std::pair<int,int> > SiteList;\r\nSiteList.resize(1);\r\nSiteList[0].first = 0;\r\nSiteList[0].second = 0; // Put the first site at the origin\r\n\r\nstd::vector< std::pair<int,int> > Empty; // The single-site graph has no subgraphs!\r\n\r\nSiteGraph Start(SiteList, 0, 1, 1, Empty); // Build the graph\r\n\r\ntestsites[0].resize(1);\r\ntestsites[0][0] = Start; //Put it into the vector\r\n\r\nConstructSiteBasedGraphs(testsites, 10);         // Generate all site-based graphs up to order 10 (10 sites)\r\nFindSubgraphs(testsites);                        // Find the subgraphs of the graphs we just generated \r\nWriteGraphsToFile(testsites, \"10sitebased.dat\"); // Write all the graphs we generated to disk\r\n```\r\nHere's another, but this time we generate bond-based graphs:\r\n```C++\r\nvector< vector< BondGraph > > testbonds;\r\ntestbonds.resize(2); // Create space for a single-site graph and a single-bond graph - we need both for our simulation!\r\n\r\nvector<std::pair< std::pair<int,int>, std::pair<int,int> > > BondList1; \r\nvector<std::pair< std::pair<int,int>, std::pair<int,int> > > BondList2;\r\nBondList1.resize(1);\r\nBondList2.resize(1);\r\n\r\nBondList1[0].first.first = 0;\r\nBondList1[0].first.second = 0;\r\nBondList1[0].second.first = 0;\r\nBondList1[0].second.second = 0; // The first graph is just one site at the origin\r\n\r\nBondList2[0].first.first = 0;\r\nBondList2[0].first.second = 0;\r\nBondList2[0].second.first = 1;\r\nBondList2[0].second.second = 0; // The second graph is a bond from the origin to (1,0)\r\n\r\nvector< std::pair<int,int> > Empty1; // The single site graph has no subgraphs\r\nvector< std::pair<int,int> > Empty2; // We'll fill this later using FindSubgraphs()\r\n\r\nBondGraph Start1(BondList1, 0, 0, 1, Empty1); \r\nBondGraph Start2(BondList2, 1, 1, 2, Empty2); // Build graphs\r\n\r\ntestbonds[0].resize(1);\r\ntestbonds[0][0] = Start1;\r\ntestbonds[0][0].LowField = true; // Put the single site graph into the vector\r\n\r\ntestbonds[1].resize(1);\r\ntestbonds[1][0] = Start2;\r\ntestbonds[1][0].Identifier = 1; \r\ntestbonds[1][0].LowField = true; \r\ntestbonds[1][0].GenerateAdjacencyList(); // Put the single bond graph into the vector\r\n\r\nConstructBondBasedGraphs(testbonds, 4);         // Generate all site-based graphs up to order 4 (4 bonds, up to 5 sites)\r\nFindSubgraphs(testbonds);                       // Find the subgraphs of the graphs we just generated\r\nWriteGraphsToFile(testbonds, \"4bondbased.dat\"); // Write all the graphs we generated to disk\r\n```\r\nPerhaps you would like to generate all rectangular site based graphs up to a 4 by 4 plaquette?\r\n```C++\r\nstd::vector< std::vector< SiteGraph > > rectangles; // This time the vector is empty\r\nConstructRectangularSiteGraphs(rectangles, 4, 4);\r\nWriteGraphsToFile(rectangles, \"4-4rectangles.dat\");\r\n```\r\nOr maybe you want all rectangular site based graphs with 16 sites or fewer?\r\n```C++\r\nstd::vector< std::vector< SiteGraph > > rectangles; // This time the vector is empty\r\nConstructRectangularSiteGraphs(rectangles, 16);\r\nWriteGraphsToFile(rectangles, \"16rectangles.dat\");\r\n```\r\n\r\nIf you would like to generate a large number of graphs and are not sure how long this will take, you can try using versions of `FindSubgraphs` and `WriteGraphsToFile` that write only one order at a time - this way you can incrementally add to your resulting file and \"save\" your progress in the case that your job gets killed. To do that, initialise all the vectors as above, but we'll call the generation/subgraph/writing code a little differently this time:\r\n\r\n```C++\r\nfor(unsigned int i = 1; i <= 10; i++)\r\n{\r\n        ConstructSiteBasedGraphs(testsites, i);\r\n        FindSubgraphs(testsites, i);\r\n        WriteGraphsToFile(testsites, \"10sitebased.dat\", i);\r\n}\r\n```\r\nOr, for the bonds example:\r\n```C++\r\nfor(unsigned int i = 1; i <= 10; i++)\r\n{\r\n        ConstructBondBasedGraphs(testbonds, i);\r\n        FindSubgraphs(testbonds, i);\r\n        WriteGraphsToFile(testbonds, \"10bondbased.dat\", i);\r\n}\r\n```\r\nTo compile Graphs, you can use the provided Makefile (which has a bunch of g++ warnings and OpenMP enabled for you) or you can simply run your own compiler on it. Graphs has been tested with -O2 and below only. You don't need to pass any command line arguments to run the executable, but make sure that you can actually write to the location you want to put the graphs in if you're using `WriteGraphsToFile`.\r\n\r\n","name":"Graphs","tagline":"Graph generation for quantum lattice models"}